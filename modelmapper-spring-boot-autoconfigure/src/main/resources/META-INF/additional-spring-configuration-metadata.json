{
  "groups": [],
  "properties": [
    {
      "name": "modelmapper.ambiguity-ignored",
      "defaultValue": false
    },
    {
      "name": "modelmapper.field-access-level",
      "defaultValue": "public"
    },
    {
      "name": "modelmapper.method-access-level",
      "defaultValue": "public"
    },
    {
      "name": "modelmapper.field-matching-enabled",
      "defaultValue": false
    },
    {
      "name": "modelmapper.matching-strategy",
      "defaultValue": "Standard"
    },
    {
      "name": "modelmapper.full-type-matching-required",
      "defaultValue": false
    },
    {
      "name": "modelmapper.implicit-matching-enabled",
      "defaultValue": true
    },
    {
      "name": "modelmapper.prefer-nested-properties",
      "defaultValue": true
    },
    {
      "name": "modelmapper.skip-null-enabled",
      "defaultValue": false
    },
    {
      "name": "modelmapper.collections-merge-enabled",
      "defaultValue": false
    },
    {
      "name": "modelmapper.deep-copy-enabled",
      "defaultValue": false
    },
    {
      "name": "modelmapper.destination-name-tokenizer",
      "defaultValue": "Camel Case"
    },
    {
      "name": "modelmapper.destination-name-transformer",
      "defaultValue": "Javabeans Mutator"
    },
    {
      "name": "modelmapper.destination-naming-convention",
      "defaultValue": "Javabeans Mutator"
    },
    {
      "name": "modelmapper.source-name-tokenizer",
      "defaultValue": "Camel Case"
    },
    {
      "name": "modelmapper.source-name-transformer",
      "defaultValue": "Javabeans Accessor"
    },
    {
      "name": "modelmapper.source-naming-convention",
      "defaultValue": "Javabeans Accessor"
    },
    {
      "name": "modelmapper.locked-enabled",
      "defaultValue": true
    }
  ],
  "hints": [
    {
      "name": "modelmapper.matching-strategy",
      "values": [
        {
          "value": "Standard",
          "description": "A matching strategy that allows for source properties to be intelligently matched to\ndestination properties, requiring that <i>all</i> destination properties be matched and all\nsource property names have at least one token matched. The following rules apply:\n \n<ul><li>Tokens can be matched in <i>any</i> order</li><li>All destination property name tokens must be matched</li><li>All source property names must have at least one token matched</li><li>Tokens can be combined and matched in order</li></ul>"
        },
        {
          "value": "Strict",
          "description": "A matching strategy that allows for source properties to be strictly matched to destination\nproperties. This strategy allows for complete matching accuracy, ensuring that no mismatches or\nambiguity occurs. But it requires that property name tokens on the source and destination side\nmatch each other precisely. The following rules apply:\n \n<ul><li>Tokens are matched in <i>strict</i> order</li><li>All destination property name tokens must be matched</li><li>All source property names must have all tokens matched</li></ul>"
        },
        {
          "value": "Loose",
          "description": "A matching strategy that allows for source properties to be loosely matched to destination\nproperties by requiring that <i>only</i> the last destination property in a hierarchy be\nmatched. The following rules apply:\n \n<ul><li>Tokens can be matched in <i>any</i> order</li><li>The last destination property name must have all tokens matched</li><li>The last source property name must have at least one token matched</li></ul>"
        }
      ]
    },
    {
      "name": "modelmapper.destination-name-tokenizer",
      "values": [
        {
          "value": "Camel Case",
          "description": "Tokenizes class and property names according to the CamelCase naming convention."
        },
        {
          "value": "Underscore",
          "description": "Tokenizes class and property names according to the underscore naming convention."
        }
      ]
    },
    {
      "name": "modelmapper.destination-name-transformer",
      "values": [
        {
          "value": "Javabeans Mutator",
          "description": "Transforms mutator names to their simple property name according to the JavaBeans convention. Class and field names are unchanged."
        },
        {
          "value": "Javabeans Accessor",
          "description": "Transforms accessor names to their simple property name according to the JavaBeans convention. Class and field names are unchanged."
        }
      ]
    },
    {
      "name": "modelmapper.destination-naming-convention",
      "values": [
        {
          "value": "Javabeans Mutator",
          "description": "JavaBeans naming convention for mutators."
        },
        {
          "value": "Javabeans Accessor",
          "description": "JavaBeans naming convention for accessors."
        },
        {
          "value": "None",
          "description": "Represents no naming convention. This convention applies to all property names, allowing all properties to be eligible for matching."
        }
      ]
    },
    {
      "name": "modelmapper.source-name-tokenizer",
      "values": [
        {
          "value": "Camel Case",
          "description": "Tokenizes class and property names according to the CamelCase naming convention."
        },
        {
          "value": "Underscore",
          "description": "Tokenizes class and property names according to the underscore naming convention."
        }
      ]
    },
    {
      "name": "modelmapper.source-name-transformer",
      "values": [
        {
          "value": "Javabeans Mutator",
          "description": "Transforms mutator names to their simple property name according to the JavaBeans convention. Class and field names are unchanged."
        },
        {
          "value": "Javabeans Accessor",
          "description": "Transforms accessor names to their simple property name according to the JavaBeans convention. Class and field names are unchanged."
        }
      ]
    },
    {
      "name": "modelmapper.source-naming-convention",
      "values": [
        {
          "value": "Javabeans Mutator",
          "description": "JavaBeans naming convention for mutators."
        },
        {
          "value": "Javabeans Accessor",
          "description": "JavaBeans naming convention for accessors."
        },
        {
          "value": "None",
          "description": "Represents no naming convention. This convention applies to all property names, allowing all properties to be eligible for matching."
        }
      ]
    }
  ]
}